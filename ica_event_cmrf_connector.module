<?php
/*-------------------------------------------------------+
| ICA Event Registration Module                          |
| Copyright (C) 2016 SYSTOPIA                            |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL license. You can redistribute it and/or     |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

include_once('includes/webform_integration.inc');


/**
 * Wrapper for sending an API call to CiviCRM via the CMRF framework
 */
function ica_event_cmrf_connector_sendCall($entity, $action, $parameters, $options = array()) {
  // get config
  $config = variable_get('ica_event_cmrf_connector');
  if ($config == NULL) {
    $config = array();
    variable_set('ica_event_cmrf_connector', $config);
  }

  // get core
  $core = cmrf_core_get_core();

  if (empty($config['connector_id'])) {
    $config['connector_id'] = $core->registerConnector('ica_memeber');
    variable_set('ica_event_cmrf_connector', $config);
  }

  $call = $core->createCall($config['connector_id'], $entity, $action, $parameters, $options);
  $core->executeCall($call);
  return $call;
}


/**
 * Include our logic into (web)form
 */
function ica_event_cmrf_connector_form_alter(&$form, $form_state, $form_id) {
  if (in_array($form_id, explode(',', ICA_EVENT_FORM_IDS))) {
    // copy some prefill/defaul values
    include_once('includes/prefill.inc');
    ica_event_process_prefill($form, $form_state);

    // calculate amount
    if (isset($form['submitted'][ICA_EVENT_AMOUNT])) {
      drupal_add_js(drupal_get_path('module', 'ica_event_cmrf_connector') . "/js/hide_empty_counters.js");
      drupal_add_css(drupal_get_path('module', 'ica_event_cmrf_connector') . "/css/overview.css");
      include_once('includes/calculate_registration_fee.inc');
      $registration = ica_event_calculate_registration_fee($form, $form_state);
      
      $form['submitted'][ICA_EVENT_AMOUNT]['#value'] = $registration['amount'];
      // $form['submitted'][ICA_EVENT_AMOUNT]['#value'] = '€ ' . $registration['amount'];

      // set the fields
      foreach ($registration['fees'] as $key => $fee) {
        if (isset($form['submitted']["registration_{$key}_count"])) {
          $form['submitted']["registration_{$key}_count"]['#value'] = $registration[$key];
        }

        if (isset($form['submitted']["registration_{$key}_subtotal"])) {
          $amount = ($registration[$key] * $registration['fees'][$key]);
          // if ($amount != 0) { $amount = '€ ' . $amount; }
          $form['submitted']["registration_{$key}_subtotal"]['#value'] = $amount;
        }
      }
    }

    if (isset($form['submitted'][ICA_EVENT_MATRIX])) {
      $form['#attached']['js'][] = drupal_get_path('module', 'ica_event_cmrf_connector') . "/js/groupmatrix_validation.js";
      $form['#attached']['css'][] = drupal_get_path('module', 'ica_event_cmrf_connector') . "/css/groupmatrix_validation.css";

      // Since Webform Matrix Component only validates mandatory fields for the
      // first row, make mandatory fields required in all rows.
      foreach ($form['#node']->webform['components'] as $cid => $component) {
        if ($component['form_key'] == ICA_EVENT_MATRIX) {
          $element = $form['submitted'][ICA_EVENT_MATRIX];
          for ($prow = 1; $prow <= $form_state[ICA_EVENT_MATRIX]['temp_matrix_rows']; $prow++) {
            if (isset($component['extra']['element'])) {
              foreach ($component['extra']['element'] as $elekey => $elevalue) {
                list($j, $i) = explode('-', $elekey);
                // If component is mandatory.
                $required = $component['mandatory'] ? TRUE : FALSE;

                if (!$required) {
                  // If particular element is manadatory.
                  $required = $elevalue['mandatory'] ? TRUE : FALSE;
                }
                $element[$prow][$i]['#required'] = $required;
                $form['submitted'][ICA_EVENT_MATRIX] = $element;
              }
            }
          }
        }
      }
    }

    // insert lookup logic for discount code
    if (isset($form['submitted'][ICA_EVENT_DISCOUNTCODE])) {
      include_once('includes/discount_code.inc');
      $form['submitted'][ICA_EVENT_DISCOUNTCODE]['#ajax'] = array(
        'callback' => 'ica_event_discount_code_ajax_callback',
        // 'wrapper'  => 'webform-client-form-' . $form['#node']->nid . '-wrapper',
        'method'   => 'replace',
        'effect'   => 'fade',
        'event'    => 'change',
      );
    }
  }
}

/**
 * Process order completion
 */
function ica_event_cmrf_connector_commerce_checkout_complete($order) {
  include_once('includes/process_payment.inc');
  ica_event_process_payment($order);
}

/**
 * Call submission handler, implements hook_webform_submission_insert
 */
function ica_event_cmrf_connector_webform_submission_insert($node, $submission) {
  include_once('includes/submission.inc');
  ica_event_process_submission($node, $submission);
}


/**
 * Call submission handler, implements hook_webform_submission_update
 */
function ica_event_cmrf_connector_webform_submission_update($node, $submission) {
  include_once('includes/submission.inc');
  ica_event_process_submission($node, $submission);
}

/**
 * pass the group registraton validation on to the included file
 */
function ica_event_cmrf_connector_webform_validation_validate($validator_name, $items, $components, $rule) {
  if ($validator_name == 'group_registration') {
    include_once('includes/groupmatrix_validation.inc');
    return ica_event_groupmatrix_validation($items, $components, $rule);
  }
}

/**
 * add matrix validator
 */
function ica_event_cmrf_connector_webform_validation_validators() {
  return array(
    'group_registration' => array(
      'name' => "Group Registration Validation",
      'description' => "Will make sure that the internal conditions in the matrix will be upheld.",
      'component_types' => array('matrix'),
    )
  );
}

/**
 * Define custom dropdown lists
 */
function ica_event_cmrf_connector_webform_select_options_info($include_disabled = FALSE) {
  return array(
    'member_organisations' => array(
      'title'            => t('ICA Member Organisations'),
      'options callback' => 'ica_member_organisations', 
      'file'             => 'includes/optionlists.inc',
      )
    );
  return $options;
}




